/*
 * Xeader Studios
 *
 * NOTICE OF LICENCE
 *
 * This source file is subject to the EULA
 * that is bundled with this package in the file LICENSE.txt
 * It is also available through th world-wide-web at this URL:
 * https://xeader.com/LICENCE-CE.txt
 *
 * @category bluelabs.cbm
 * @package bluelabs.cbm
 *
 * @author Antonio Gatta <a.gatta@xeader.com>
 * @url http://xeader.com
 * @copyright Copyright (c) 2019 Xeader Studios
 * @license All right reserved
 */

@function breakpoints_value($map, $breakpoint) {
  @if type_of($map) != 'map' {
    @return $map;
  }

  $value: null;
  @each $size, $breakpointSize in $breakpoint-classes {
    @if map_has_key($map, $size) {
      $value: map_get($map, $size);
    }

    @if $size == $breakpoint {
      @return $value;
    }
  }

  @return $value;
}

@mixin grid-container {
  @include full-width-max;
  grid-column: 1 / -1;
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-items: center;

  .#{$grid-name} {
    margin-left: calc(-1 * var(--grid-outer));
    margin-right: calc(-1 * var(--grid-outer));
    padding-left: var(--grid-outer);
    padding-right: var(--grid-outer);
  }

  @include breakpoint(large up) {
    margin-left: unset;
    margin-right: unset;
  }
}

@mixin grid() {
  width: 100%;
  max-width: $global-width;
  display: grid;
  flex: 0 1 auto;

  @include breakpoint($global-width up) {
    width: stretch;
  }

  @if type-of($grid-column-count) == "number" {
    grid-template-columns: repeat($grid-column-count, minmax(0, 1fr));
    --grid-columns: #{$grid-column-count};
  } @else if type-of($grid-column-count) == "map" {
    @each $size, $column-count in $grid-column-count {
      @include breakpoint($size up) {
        grid-template-columns: repeat($column-count, minmax(0, 1fr));
      }
    }
  }

  @each $size, $gutter in $grid-column-gutter {
    @include breakpoint($size up) {
      grid-column-gap: $gutter;
      --grid-gutter: #{$gutter};
    }
  }
  @each $size, $outer in $grid-outer-margin {
    @include breakpoint($size up) {
      --grid-outer: #{$outer};
    }
  }
}

@mixin grid-column($span: 1) {
  grid-column-end: span $span;
  --column-columns: #{$span};
}

@mixin grid-wrapper($trimLeft: true, $trimRight: true) {
  grid-column: 1 / -1;
  display: grid;
  grid-template-columns: repeat(var(--grid-columns), minmax(0, 1fr));
  grid-column-gap: var(--grid-gutter);

  @if ($trimLeft) {
    margin-right: calc(-1 * var(--grid-outer));
    padding-right: var(--grid-outer);
  }

  @if ($trimRight) {
    margin-left: calc(-1 * var(--grid-outer));
    padding-left: var(--grid-outer);
  }
}

// get dimension of column per total
@function columns($number, $total: null, $size: small) {
  $max-columns: breakpoints_value($grid-column-count, $size);
  $percentage: null;
  @if($total == null){
    $percentage: unquote("100% / var(--grid-columns) * " + $number);
    $total: unquote("var(--grid-columns)");
  }@else{
    $percentage: percentage($max-columns / $total) / $max-columns * $number;
  }

  @return calc(#{$percentage} + (var(--grid-gutter) / (#{$max-columns} - #{$total}) * #{$number}));
}

@mixin subgrid($columns, $start: null) {
  display: grid;
  grid-template-columns: repeat($columns, minmax(0, 1fr));
  grid-column-gap: var(--grid-gutter);
  @if $start == null {
    grid-column-end: span $columns;
  } @else {
    grid-column: $start / span $columns;
  }
  --grid-columns: #{$columns};
}
